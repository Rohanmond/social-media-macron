// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  followers   Follow[] @relation("followers")
  following   Follow[] @relation("following")
  createdAt   DateTime @default(now())
}

model Post {
  id        String    @id @default(cuid())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())
}

model Like {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())
}

model Follow {
  id        String    @id @default(cuid())
  follower  User      @relation("following", fields: [followerId], references: [id])
  followerId String
  following User      @relation("followers", fields: [followingId], references: [id])
  followingId String
  createdAt DateTime  @default(now())
}
